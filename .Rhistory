library(shiny); library(dplyr)
postcode.all <- readRDS("currentmax.df")
pnames <- redRDS("list")
pnames <- readRDS("list")
runApp()
library(shiny); library(dplyr); library(lubridate)
postcode.all <- readRDS("currentmax.df")
pnames <- readRDS("list")
dseq <- seq(from = as.Date("01-01-2018", format = "%d-%m-%Y"), to = as.Date("31-12-2021", format = "%d-%m-%Y"), by = 1)
runApp()
shiny::runApp()
df1 <- data.frame(status.df[b,1], "season starts")
dseq <- seq(from = as.Date("01-01-2015", format = "%d-%m-%Y"), to = as.Date(Sys.Date(), format = "%d-%m-%Y"), by = 1)
list <- readRDS("list")
postcodes.all <- readRDS("poa20152021max.RDS")
postcodes.all[nrow(postcodes.all)+(length(dseq) - nrow(postcodes.all)),] <- NA
postcode <- 5067
req(input$postcode != "")
postcode <- 5067
z <- which(list==postcode)
status.df <- data.frame(dseq, postcodes.all[,which(list==postcode)])
status.df[,3] <- ifelse(status.df[,2] > 130, 1, 0)
status.df[,4] <- NA
for (n in 1:nrow(status.df)){
status.df[n,4] <- ifelse(status.df[(n+1),2] < 130 & status.df[n,2]>130, 1, 0)
}
a <- which(status.df[,4]==1)
cutoffdata <- data.frame(status.df[a,1], "season stops")
status.df[,5] <- NA
status.df[,5] <- ifelse(status.df[,2] < 130, 1, 0)
status.df[,6] <- NA
for (n in 1:nrow(status.df)){
status.df[n,6] <- ifelse(status.df[(n+1),2] > 130 & status.df[n,2]<130, 1, 0)
}
b <- which(status.df[,6]==1)
df1 <- data.frame(status.df[b,1], "season starts")
colnames(df1) <- c("Date", ("Status for", input$postcode, sep=""))
col2name <- paste("status for", 5067, sep="")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cutoff.df
postcode <- 5067
z <- which(list==postcode)
status.df <- data.frame(dseq, postcodes.all[,which(list==postcode)])
status.df[,3] <- ifelse(status.df[,2] > 130, 1, 0)
status.df[,4] <- NA
for (n in 1:nrow(status.df)){
status.df[n,4] <- ifelse(status.df[(n+1),2] < 130 & status.df[n,2]>130, 1, 0)
}
a <- which(status.df[,4]==1)
cutoffdata <- data.frame(status.df[a,1], "season stops")
status.df[,5] <- NA
status.df[,5] <- ifelse(status.df[,2] < 130, 1, 0)
status.df[,6] <- NA
for (n in 1:nrow(status.df)){
status.df[n,6] <- ifelse(status.df[(n+1),2] > 130 & status.df[n,2]<130, 1, 0)
}
b <- which(status.df[,6]==1)
df1 <- data.frame(status.df[b,1], "season starts")
colnames(df1) <- c("date", "status")
colnames(df1) <- c("Date", paste("Status for ", input$postcode, sep=""))
colnames(df1) <- c("date", "status")
colnames(df1) <- c("Date", paste("Status for ", input$postcode, sep=""))
colnames(df1) <- c("Date", paste("Status for ", 5067, sep=""))
View(df1)
runApp()
runApp()
runApp()
runApp()
which(list==3000)
runApp()
runApp()
runApp()
ggplot(trial, aes(trial[,7], y=trial[,4]))+
geom_tile(aes(fill=trial[,9]))+
scale_fill_manual(values=colours)+
geom_hline(yintercept=yearbreaks)+
scale_y_reverse(breaks=years)+
scale_x_discrete(breaks=new_col)+
labs(title=postcode, x="Date", y="Year", fill="Status")+
theme(plot.title= element_text(face="bold", size=20),
axis.plot.x = element_text(size=16),
axis.text.x = element_text(size=14),
axis.plot.y = element_text(size=16),
axis.text.y = element_text(size=14))
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
postcode <- 5067
z <- which(list==postcode)
status.df <- data.frame(dseq, {if(length(z)!=0) select(postcodes.all, (z))
else return(NULL)})
status.df[,3] <- ifelse(status.df[,2] > 130, 1, 0)
status.df[,4] <- NA
#status.df[,4] <- cut(status.df[,2],
#breaks = c(0, 120, 130, 1000),
#labels = c("Transmission unlikely", "Shoulder", "Transmission possible"))
for (n in 1:nrow(status.df)){
status.df[n,4] <- ifelse(status.df[(n+1),2] < 130 & status.df[n,2]>130, 1, 0)
}
a <- which(status.df[,4]==1)
cutoffdata <- data.frame(status.df[a,1], "season stops")
status.df[,5] <- NA
status.df[,5] <- ifelse(status.df[,2] < 130, 1, 0)
status.df[,6] <- NA
for (n in 1:nrow(status.df)){
status.df[n,6] <- ifelse(status.df[(n+1),2] > 130 & status.df[n,2]<130, 1, 0)
}
b <- which(status.df[,6]==1)
df1 <- data.frame(status.df[b,1], "season starts")
colnames(df1) <- c("Date", paste("Status for ", postcode, sep=""))
df2 <- data.frame(status.df[a,1], "season stops")
colnames(df2) <- c("Date", paste("Status for ", postcode, sep=""))
cutoff.df <- rbind(df1, df2)
cutoff.df <- data.frame(cutoff.df[order(as.Date(cutoff.df[,1], format="%Y-%m-%d")),])
cutoff.df <- ifelse ((length(a)*length(b) != 0), cutoff.df, "Not applicable")
View(cutoff.df)
cutoff.df <- if_else ((length(a)*length(b) != 0), cutoff.df, "Not applicable")
cutoff.df <- if_else ((length(a)*length(b) != 0), cutoff.df, c("Not applicable"))
c <- c("Not applicable")
c <- c("Not applicable", "for this postcode")
cutoff.df <- if_else ((length(a)*length(b) != 0), cutoff.df, c)
c <- c("Not applicable")
cutoff.df <- if_else ((length(a)*length(b) != 0), cutoff.df, c)
c <- c(NA)
cutoff.df <- if_else ((length(a)*length(b) != 0), cutoff.df, c)
cutoffdata <- if_else ((length(a)*length(b) != 0), cutoff.df, c)
error.df <- data.frame("Not applicable", "for this postcode")
View(error.df)
cutoffdata <- if_else ((length(a)*length(b) != 0), cutoff.df, error.df)
cutoffdata <- if_else ((length(a)*length(b) != 0), cutoff.df, 0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nrow(cutoff.df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(shiny); library(lubridate); library(DT); library(ggplot2); library(sf);
library(sp); library(cropgrowdays); library(RColorBrewer); library(dplyr); library(scales);
library(maptools); library(raster); library(sf); library(sp); library(rgeos); library(rgdal); library(devtools)
library(terra); library(rasterVis); library(tmap)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
dseq <- seq(from = as.Date("01-01-2015", format = "%d-%m-%Y"), to = (as.Date(Sys.Date()-2, format = "%d-%m-%Y")), by = 1)
list <- readRDS("list")
currentmax.df <- readRDS("currentmax.RDS")
currentmax.df <- currentmax.df[(max(dseq)),]
View(currentmax.df)
dseq <- seq(from = as.Date("01-01-2015", format = "%d-%m-%Y"), to = (as.Date(Sys.Date()-2, format = "%d-%m-%Y")), by = 1)
list <- readRDS("list")
postcodes.all <- readRDS("poa20152021max.RDS")
postcodes.all[nrow(postcodes.all)+(length(dseq) - nrow(postcodes.all)),] <- NA
currentmax.df <- readRDS("currentmax.RDS")
currentmax.df <- currentmax.df[(max(dseq)),]
View(currentmax.df)
currentmax.df <- readRDS("currentmax.RDS")
currentmax.df <- currentmax.df[nrow(currentmax.df),]
View(currentmax.df)
#column no. of capital cities
capital.codes <- c(35, 466, 671, 1365, 1798, 2139, 2523, 1)
capital.names <- c("Sydney", "Canberra", "Melbourne", "Brisbane", "Adelaide", "Perth", "Hobart", "Darwin")
capital.chdu <- currentmax.df[,((capital.codes))]
View(capital.chdu)
capital.chdu <- if_else(capital.chdu >= 130, 'on', 'off')
library(shiny); library(lubridate); library(DT); library(ggplot2); library(sf);
library(sp); library(cropgrowdays); library(RColorBrewer); library(dplyr); library(scales);
library(maptools); library(raster); library(sf); library(sp); library(rgeos); library(rgdal); library(devtools)
library(terra); library(rasterVis); library(tmap); library(tmaptools)
runApp()
Q
Q
Q
Q
Q
runApp()
runApp()
runApp()
max(dseq)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
Q
myFun <- function(x) {if_else(x >= 130, 1, 0)}
Rn <- app(chdu.r, fun=myFun)
chdu <- paste("C:/Users/a1667856/Box/PhD/HDU Mapping/hdu_mapping/hdumaps/", "chdu", (format((Sys.Date()-2), format = "%Y%m%d")), ".tif", sep="")
chdu.r <- rast(chdu)
myFun <- function(x) {if_else(x >= 130, 1, 0)}
Rn <- app(chdu.r, fun=myFun)
tmap_mode("plot")
tm_shape(Rn)+
tm_raster(n=2,
palette=get_brewer_pal(palette="Paired", plot=FALSE))
tmap_mode("view")
tm_shape(Rn)+
tm_raster(n=2,
palette=get_brewer_pal(palette="Paired", plot=FALSE))
runApp()
runApp()
runApp()
